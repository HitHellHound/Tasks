#include <bits/stdc++.h>

using namespace std;

int n, m, pix, piy, kpx, kpy, si;
int pole[1002][1002];
string st[100000], nap[4] = {"Down", "Left", "Up", "Right"};
pair <int,int> q[10002];
int dvizh[2][4] = {{-1, 0, 1, 0},
                   { 0, 1, 0,-1}};

int main()
{

    cout << "Enter size of your labyrinth:";
    cin >> n >> m;
    cout << "Enter labyrinth:" << endl;
    for (int i = 1; i <= m; i++){
        for (int j = 1; j <= n; j++){
            cin >> pole[i][j];
        }
    }
    cout << "Start position:";
    cin >> pix >> piy;
    cout << "End of way:";
    cin >> kpx >> kpy;

    for (int i = 0; i <= n + 1; i++) pole[0][i] = pole[m+1][i] = 1;
    for (int i = 0; i <= m + 1; i++) pole[i][0] = pole[i][n+1] = 1;

    q[0].first = pix;
    q[0].second = piy;
    int l = 0;
    int r = 1;
    pole[pix][piy] = 2;

    while (l != r){
        if (r > 10000){
            r = 0;
        }
        for (int i = 0; i < 4; i++){
            if (pole[q[l].first + dvizh[0][i]][q[l].second + dvizh[1][i]] == 0){
                pole[q[l].first + dvizh[0][i]][q[l].second + dvizh[1][i]] = pole[q[l].first][q[l].second] + 1;
                q[r].first = q[l].first + dvizh[0][i];
                q[r].second = q[l].second + dvizh[1][i];
                r++;
            }
        }
        if (l > 10000){
            l = 0;
        }
        l++;
    }

    if (pole[kpx][kpy] == 0){
        cout << "It's IMMPOSIBLE!";
        return 0;
    }

    r = 0;

    int x = kpx, y = kpy;

    do{
        for (int i = 0; i < 4; i++){
            if (pole[x + dvizh[0][i]][y + dvizh[1][i]] == pole[x][y] - 1){
                st[r] = nap[i];
                r++;
                x += dvizh[0][i];
                y += dvizh[1][i];
                break;
            }
        }
    }while (pole[x][y] != 2);

    cout << endl;

    /*for (int i = 0; i <= m + 1; i++){
        for (int j = 0; j <= n + 1; j++){
            cout << pole[i][j] << " ";
        }
        cout << endl;
    }*/

    cout << "Length of way:" << pole[kpy][kpx] - 2 << endl;

    r--;

    cout << "Way:";
    do{
        cout << st[r] << endl;
        r--;
    }while(r > -1);


    return 0;
}
